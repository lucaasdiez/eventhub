name: CD EventHub

on:
    workflow_run:
        workflows: ["CI EventHub"]
        types: [completed]
        branches: [fix/cd-actions-correciones]

    release:
        types: [published]

jobs:
    build-and-deploy:
        runs-on: ubuntu-latest

        if: |
            github.event_name == 'release' ||
            (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')

        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  ref: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.head_sha || github.sha }}

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

              with:
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

            - name: Log in to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKERHUB_USERNAME }}
                  password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Extract metadata (tags and labels)
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: ${{ secrets.DOCKERHUB_USERNAME }}/eventhub

                  tags: |
                      type=raw,value=latest,enable=${{ github.event_name == 'workflow_run' }}
                      type=semver,pattern={{version}},event=release,enable=${{ github.event_name == 'release' }}
                  labels: |
                      org.opencontainers.image.title=EventHub
                      org.opencontainers.image.description=Plataforma de gesti√≥n de eventos

            - name: Build and push Docker image
              id: build
              uses: docker/build-push-action@v5
              with:
                  context: .
                  file: ./Dockerfile
                  push: true
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }} #
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

            - name: Trigger Render Deploy Hook

              run: curl -X GET ${{ secrets.RENDER_HOOK }}
              env:
                  RENDER_HOOK: ${{ secrets.RENDER_HOOK }}
